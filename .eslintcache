[{"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\index.js":"1","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\App.js":"2","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\reportWebVitals.js":"3","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\BasicTable.js":"4","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\columns.js":"5","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\SortingTable.js":"6","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\FilteringTable.js":"7","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\GlobalFilter.js":"8","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\ColumnFilter.js":"9","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\PaginationTable.js":"10","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\RowSelection.js":"11","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\Checkbox.js":"12","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\ColumnOrder.js":"13","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\ColumnHiding.js":"14","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\StickyTable.js":"15","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\TableStyles.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":1251,"mtime":1611232685647,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":3045,"mtime":1610805062098,"results":"21","hashOfConfig":"18"},{"size":2869,"mtime":1611232791890,"results":"22","hashOfConfig":"18"},{"size":3256,"mtime":1610839744557,"results":"23","hashOfConfig":"18"},{"size":3462,"mtime":1610887000882,"results":"24","hashOfConfig":"18"},{"size":1411,"mtime":1610971878330,"results":"25","hashOfConfig":"18"},{"size":296,"mtime":1610845237550,"results":"26","hashOfConfig":"18"},{"size":5145,"mtime":1610971851116,"results":"27","hashOfConfig":"18"},{"size":4207,"mtime":1610973725923,"results":"28","hashOfConfig":"18"},{"size":518,"mtime":1610972964866,"results":"29","hashOfConfig":"18"},{"size":3401,"mtime":1611145019833,"results":"30","hashOfConfig":"18"},{"size":3652,"mtime":1611145526348,"results":"31","hashOfConfig":"18"},{"size":3143,"mtime":1611232746863,"results":"32","hashOfConfig":"18"},{"size":1127,"mtime":1611231343579,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"rerkun",{"filePath":"37","messages":"38","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\index.js",[],["74","75"],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\App.js",["76","77","78","79","80","81","82","83"],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\reportWebVitals.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\BasicTable.js",["84"],"import React, { useMemo } from 'react';\r\nimport { useTable } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport './BasicTable.css'\r\n\r\nexport const BasicTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\columns.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\SortingTable.js",["85"],"import React, { useMemo } from 'react';\r\nimport { useTable, useSortBy } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport './BasicTable.css'\r\n\r\nexport const SortingTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    },\r\n        useSortBy)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render('Header')}\r\n                                    <span>{column.isSorted ? (column.isSortedDesc ? '🔽' : '🔼') : ''}</span>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\FilteringTable.js",["86"],"import React, { useMemo } from 'react';\r\nimport { useTable, useGlobalFilter, useFilters } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport { GlobalFilter } from './GlobalFilter';\r\nimport './BasicTable.css'\r\n\r\nexport const FilteringTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n        state,\r\n        setGlobalFilter,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    }, \r\n    useFilters,\r\n    useGlobalFilter)\r\n\r\n    const { globalFilter } = state\r\n\r\n    return (\r\n        <>\r\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\r\n            \r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}\r\n                                <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\GlobalFilter.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\ColumnFilter.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\PaginationTable.js",["87"],"import React, { useMemo } from 'react';\r\nimport { useTable, usePagination } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport './BasicTable.css'\r\n\r\nexport const PaginationTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        page,\r\n        nextPage,               // This allows for the 'page movement buttons'\r\n        previousPage,           // This allows for the 'page movement buttons'\r\n        canNextPage,            // This allows for the 'page movement buttons'\r\n        canPreviousPage,        // This allows for the 'page movement buttons'\r\n        pageOptions,            // This allows for the 'page preview' (i.e. x of x)\r\n        gotoPage,               // This allows for the 'go to specific page' entry field\r\n        pageCount,              // This allows for the 'go to specific page' entry field\r\n        setPageSize,\r\n        state,                  \r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        initialState: { pageIndex: 0}       // This sets the initial page of the table unpon loading\r\n    },\r\n        usePagination)\r\n\r\n    const { pageIndex, pageSize } = state;\r\n\r\n    return (\r\n        <div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {page.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <div>\r\n                {/* This shows a page index so the user knows how many total pages there are */}\r\n                <span>Page{' '}<strong>{pageIndex + 1} of {pageOptions.length}</strong>{' '}</span>\r\n\r\n                {/* This is the entry field so the user can go to a specific page number */}\r\n                <span>\r\n                    | Go to page: {' '}\r\n                    <input type='number' defaultValue={pageIndex + 1}\r\n                    onChange={e => {\r\n                        const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\r\n                        gotoPage(pageNumber)\r\n                    }}\r\n                    style={{width: '50px'}} />\r\n                </span>\r\n\r\n                {/* This is the entry field so the user can select how many rows per page that should be displayed. (i.e. 10, 25, 50) */}\r\n                <select value={pageSize} onChange={e => setPageSize(Number(e.target.value))}>\r\n                    {\r\n                        [10, 25, 50].map(pageSize => (\r\n                    <option key={pageSize} value={pageSize}>\r\n                            Show {pageSize}\r\n                    </option>\r\n                ))}\r\n                </select>\r\n\r\n                {/* These are the buttons that allow the user to move through the various pages of the table */}\r\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\r\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</button>\r\n                <button onClick={() => nextPage()} disabled={!canNextPage}>Next</button>\r\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>{'>>'}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\RowSelection.js",["88"],"import React, { useMemo } from 'react';\r\nimport { useTable, useRowSelect } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport { Checkbox } from './Checkbox';\r\nimport './BasicTable.css'\r\n\r\nexport const RowSelection = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n        selectedFlatRows\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    },\r\n        useRowSelect,\r\n        (hooks) => {\r\n            hooks.visibleColumns.push((columns) => {\r\n                return[\r\n                    {\r\n                        id: 'selection',\r\n                        Header: ({ getToggleAllRowsSelectedProps}) => (\r\n                            <Checkbox {...getToggleAllRowsSelectedProps()} />\r\n                        ),\r\n                        Cell: ({ row }) => (\r\n                            <Checkbox {...row.getToggleRowSelectedProps()} />\r\n                        )\r\n                    },\r\n                    ...columns\r\n                ]\r\n            })\r\n        }\r\n    )\r\n\r\n    const firstPageRows = rows.slice(0, 10);\r\n\r\n    return (\r\n        <div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {firstPageRows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n            <pre>\r\n                    <code>\r\n                        {JSON.stringify(\r\n                            {\r\n                                selectedFlatRows: selectedFlatRows.map((row) => row.original),\r\n                            },\r\n                            null,\r\n                            2\r\n                        )}\r\n                    </code>\r\n                </pre>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\Checkbox.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\ColumnOrder.js",["89"],"import React, { useMemo } from 'react';\r\nimport { useTable, useColumnOrder } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport './BasicTable.css'\r\n\r\nexport const ColumnOrder = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n        setColumnOrder\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    },\r\n    useColumnOrder\r\n    )\r\n\r\n    const changeOrder = () => {\r\n        setColumnOrder([\r\n            'id', \r\n            'first_name',\r\n            'last_name',\r\n            'phone',\r\n            'country',\r\n            'date_of_birth'])\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={changeOrder}>Change Column Order</button>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\ColumnHiding.js",["90"],"import React, { useMemo } from 'react';\r\nimport { useTable } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport { Checkbox } from './Checkbox';\r\nimport './BasicTable.css'\r\n\r\nexport const ColumnHiding = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n        allColumns,\r\n        getToggleHideAllColumnsProps\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <Checkbox {...getToggleHideAllColumnsProps()} /> Toggle All\r\n                </div>\r\n                {allColumns.map(column => (\r\n                    <div key={column.id}>\r\n                        <label>\r\n                            <input type='checkbox' {...column.getToggleHiddenProps()} />\r\n                            {column.Header}\r\n                        </label>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\StickyTable.js",["91","92"],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\TableStyles.js",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":8,"nodeType":"99","messageId":"100","endLine":1,"endColumn":12},{"ruleId":"97","severity":1,"message":"101","line":3,"column":10,"nodeType":"99","messageId":"100","endLine":3,"endColumn":20},{"ruleId":"97","severity":1,"message":"102","line":4,"column":10,"nodeType":"99","messageId":"100","endLine":4,"endColumn":22},{"ruleId":"97","severity":1,"message":"103","line":5,"column":10,"nodeType":"99","messageId":"100","endLine":5,"endColumn":24},{"ruleId":"97","severity":1,"message":"104","line":6,"column":10,"nodeType":"99","messageId":"100","endLine":6,"endColumn":25},{"ruleId":"97","severity":1,"message":"105","line":7,"column":10,"nodeType":"99","messageId":"100","endLine":7,"endColumn":22},{"ruleId":"97","severity":1,"message":"106","line":8,"column":10,"nodeType":"99","messageId":"100","endLine":8,"endColumn":21},{"ruleId":"97","severity":1,"message":"107","line":9,"column":10,"nodeType":"99","messageId":"100","endLine":9,"endColumn":22},{"ruleId":"97","severity":1,"message":"108","line":4,"column":19,"nodeType":"99","messageId":"100","endLine":4,"endColumn":34},{"ruleId":"97","severity":1,"message":"108","line":4,"column":19,"nodeType":"99","messageId":"100","endLine":4,"endColumn":34},{"ruleId":"97","severity":1,"message":"108","line":4,"column":19,"nodeType":"99","messageId":"100","endLine":4,"endColumn":34},{"ruleId":"97","severity":1,"message":"108","line":4,"column":19,"nodeType":"99","messageId":"100","endLine":4,"endColumn":34},{"ruleId":"97","severity":1,"message":"108","line":4,"column":19,"nodeType":"99","messageId":"100","endLine":4,"endColumn":34},{"ruleId":"97","severity":1,"message":"108","line":4,"column":19,"nodeType":"99","messageId":"100","endLine":4,"endColumn":34},{"ruleId":"97","severity":1,"message":"108","line":4,"column":19,"nodeType":"99","messageId":"100","endLine":4,"endColumn":34},{"ruleId":"97","severity":1,"message":"108","line":6,"column":19,"nodeType":"99","messageId":"100","endLine":6,"endColumn":34},{"ruleId":"97","severity":1,"message":"109","line":26,"column":9,"nodeType":"99","messageId":"100","endLine":26,"endColumn":21},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'BasicTable' is defined but never used.","'SortingTable' is defined but never used.","'FilteringTable' is defined but never used.","'PaginationTable' is defined but never used.","'RowSelection' is defined but never used.","'ColumnOrder' is defined but never used.","'ColumnHiding' is defined but never used.","'GROUPED_COLUMNS' is defined but never used.","'footerGroups' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]