[{"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\index.js":"1","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\App.js":"2","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\reportWebVitals.js":"3","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\BasicTable.js":"4","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\columns.js":"5","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\SortingTable.js":"6","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\FilteringTable.js":"7","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\GlobalFilter.js":"8","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\ColumnFilter.js":"9","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\PaginationTable.js":"10","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\RowSelection.js":"11","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\Checkbox.js":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":987,"mtime":1610973609111,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"16","hashOfConfig":"14"},{"size":3045,"mtime":1610805062098,"results":"17","hashOfConfig":"14"},{"size":2550,"mtime":1610885286590,"results":"18","hashOfConfig":"14"},{"size":3256,"mtime":1610839744557,"results":"19","hashOfConfig":"14"},{"size":3462,"mtime":1610887000882,"results":"20","hashOfConfig":"14"},{"size":1411,"mtime":1610971878330,"results":"21","hashOfConfig":"14"},{"size":296,"mtime":1610845237550,"results":"22","hashOfConfig":"14"},{"size":5145,"mtime":1610971851116,"results":"23","hashOfConfig":"14"},{"size":4207,"mtime":1610973725923,"results":"24","hashOfConfig":"14"},{"size":518,"mtime":1610972964866,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"rerkun",{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"28"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\index.js",[],["55","56"],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\App.js",["57","58","59","60","61"],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\reportWebVitals.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\BasicTable.js",["62"],"import React, { useMemo } from 'react';\r\nimport { useTable } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport './BasicTable.css'\r\n\r\nexport const BasicTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\columns.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\SortingTable.js",["63"],"import React, { useMemo } from 'react';\r\nimport { useTable, useSortBy } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport './BasicTable.css'\r\n\r\nexport const SortingTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    },\r\n        useSortBy)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render('Header')}\r\n                                    <span>{column.isSorted ? (column.isSortedDesc ? 'ðŸ”½' : 'ðŸ”¼') : ''}</span>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\FilteringTable.js",["64"],"import React, { useMemo } from 'react';\r\nimport { useTable, useGlobalFilter, useFilters } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport { GlobalFilter } from './GlobalFilter';\r\nimport './BasicTable.css'\r\n\r\nexport const FilteringTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n        state,\r\n        setGlobalFilter,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    }, \r\n    useFilters,\r\n    useGlobalFilter)\r\n\r\n    const { globalFilter } = state\r\n\r\n    return (\r\n        <>\r\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\r\n            \r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}\r\n                                <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\GlobalFilter.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\ColumnFilter.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\PaginationTable.js",["65"],"import React, { useMemo } from 'react';\r\nimport { useTable, usePagination } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport './BasicTable.css'\r\n\r\nexport const PaginationTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        page,\r\n        nextPage,               // This allows for the 'page movement buttons'\r\n        previousPage,           // This allows for the 'page movement buttons'\r\n        canNextPage,            // This allows for the 'page movement buttons'\r\n        canPreviousPage,        // This allows for the 'page movement buttons'\r\n        pageOptions,            // This allows for the 'page preview' (i.e. x of x)\r\n        gotoPage,               // This allows for the 'go to specific page' entry field\r\n        pageCount,              // This allows for the 'go to specific page' entry field\r\n        setPageSize,\r\n        state,                  \r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n        initialState: { pageIndex: 0}       // This sets the initial page of the table unpon loading\r\n    },\r\n        usePagination)\r\n\r\n    const { pageIndex, pageSize } = state;\r\n\r\n    return (\r\n        <div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {page.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <div>\r\n                {/* This shows a page index so the user knows how many total pages there are */}\r\n                <span>Page{' '}<strong>{pageIndex + 1} of {pageOptions.length}</strong>{' '}</span>\r\n\r\n                {/* This is the entry field so the user can go to a specific page number */}\r\n                <span>\r\n                    | Go to page: {' '}\r\n                    <input type='number' defaultValue={pageIndex + 1}\r\n                    onChange={e => {\r\n                        const pageNumber = e.target.value ? Number(e.target.value) - 1 : 0\r\n                        gotoPage(pageNumber)\r\n                    }}\r\n                    style={{width: '50px'}} />\r\n                </span>\r\n\r\n                {/* This is the entry field so the user can select how many rows per page that should be displayed. (i.e. 10, 25, 50) */}\r\n                <select value={pageSize} onChange={e => setPageSize(Number(e.target.value))}>\r\n                    {\r\n                        [10, 25, 50].map(pageSize => (\r\n                    <option key={pageSize} value={pageSize}>\r\n                            Show {pageSize}\r\n                    </option>\r\n                ))}\r\n                </select>\r\n\r\n                {/* These are the buttons that allow the user to move through the various pages of the table */}\r\n                <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>{'<<'}</button>\r\n                <button onClick={() => previousPage()} disabled={!canPreviousPage}>Previous</button>\r\n                <button onClick={() => nextPage()} disabled={!canNextPage}>Next</button>\r\n                <button onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>{'>>'}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\RowSelection.js",["66"],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\Checkbox.js",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":1,"column":8,"nodeType":"73","messageId":"74","endLine":1,"endColumn":12},{"ruleId":"71","severity":1,"message":"75","line":3,"column":10,"nodeType":"73","messageId":"74","endLine":3,"endColumn":20},{"ruleId":"71","severity":1,"message":"76","line":4,"column":10,"nodeType":"73","messageId":"74","endLine":4,"endColumn":22},{"ruleId":"71","severity":1,"message":"77","line":5,"column":10,"nodeType":"73","messageId":"74","endLine":5,"endColumn":24},{"ruleId":"71","severity":1,"message":"78","line":6,"column":10,"nodeType":"73","messageId":"74","endLine":6,"endColumn":25},{"ruleId":"71","severity":1,"message":"79","line":4,"column":19,"nodeType":"73","messageId":"74","endLine":4,"endColumn":34},{"ruleId":"71","severity":1,"message":"79","line":4,"column":19,"nodeType":"73","messageId":"74","endLine":4,"endColumn":34},{"ruleId":"71","severity":1,"message":"79","line":4,"column":19,"nodeType":"73","messageId":"74","endLine":4,"endColumn":34},{"ruleId":"71","severity":1,"message":"79","line":4,"column":19,"nodeType":"73","messageId":"74","endLine":4,"endColumn":34},{"ruleId":"71","severity":1,"message":"79","line":4,"column":19,"nodeType":"73","messageId":"74","endLine":4,"endColumn":34},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'BasicTable' is defined but never used.","'SortingTable' is defined but never used.","'FilteringTable' is defined but never used.","'PaginationTable' is defined but never used.","'GROUPED_COLUMNS' is defined but never used.","no-global-assign","no-unsafe-negation"]