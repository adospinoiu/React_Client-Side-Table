[{"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\index.js":"1","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\App.js":"2","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\reportWebVitals.js":"3","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\BasicTable.js":"4","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\columns.js":"5","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\SortingTable.js":"6","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\FilteringTable.js":"7","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\GlobalFilter.js":"8","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\ColumnFilter.js":"9","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\PaginationTable.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":897,"mtime":1610887413567,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":3045,"mtime":1610805062098,"results":"15","hashOfConfig":"12"},{"size":2550,"mtime":1610885286590,"results":"16","hashOfConfig":"12"},{"size":3256,"mtime":1610839744557,"results":"17","hashOfConfig":"12"},{"size":3462,"mtime":1610887000882,"results":"18","hashOfConfig":"12"},{"size":1410,"mtime":1610886953837,"results":"19","hashOfConfig":"12"},{"size":296,"mtime":1610845237550,"results":"20","hashOfConfig":"12"},{"size":4612,"mtime":1610891971061,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"rerkun",{"filePath":"25","messages":"26","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\index.js",[],["46","47"],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\App.js",["48","49","50","51"],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\reportWebVitals.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\BasicTable.js",["52"],"import React, { useMemo } from 'react';\r\nimport { useTable } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport './BasicTable.css'\r\n\r\nexport const BasicTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    })\r\n\r\n\r\n    return (\r\n        <div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\columns.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\SortingTable.js",["53"],"import React, { useMemo } from 'react';\r\nimport { useTable, useSortBy } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport './BasicTable.css'\r\n\r\nexport const SortingTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    },\r\n        useSortBy)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>{column.render('Header')}\r\n                                    <span>{column.isSorted ? (column.isSortedDesc ? 'ðŸ”½' : 'ðŸ”¼') : ''}</span>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\FilteringTable.js",["54"],"import React, { useMemo } from 'react';\r\nimport { useTable, useGlobalFilter, useFilters } from 'react-table';\r\nimport MOCK_DATA from './MOCK_DATA.json';\r\nimport { COLUMNS, GROUPED_COLUMNS } from './columns';\r\nimport { GlobalFilter } from './GlobalFilter';\r\nimport './BasicTable.css'\r\n\r\nexport const FilteringTable = () => {\r\n\r\n    // By using the useMemo() you ensure that the table is not re-rendered every time. Otherwise, react would think it is receiving new data every time.\r\n    // #############################################################################\r\n    // By using the line below, with GROUPED_COLUMNS, it creates a secondary \"header/footer group\" above the main header/footer that groups the columns. The grouping is dictated by the arrangement in columns.js \r\n    // const columns = useMemo(() => GROUPED_COLUMNS, [])\r\n    // #############################################################################\r\n    const columns = useMemo(() => COLUMNS, [])\r\n    const data = useMemo(() => MOCK_DATA, [])\r\n\r\n\r\n    // These are functions from the useTable HOOK from the react-table-package that are provided that can be accessed to create a table\r\n    // The 'columns' and 'data' are information being used to create the \"table columns\" and the \"data in the columns\"\r\n    const {\r\n        getTableProps,          // This is a function\r\n        getTableBodyProps,      // This is a function\r\n        headerGroups,           // This is an array\r\n        footerGroups,           // This is an array\r\n        rows,\r\n        prepareRow,\r\n        state,\r\n        setGlobalFilter,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    }, \r\n    useFilters,\r\n    useGlobalFilter)\r\n\r\n    const { globalFilter } = state\r\n\r\n    return (\r\n        <>\r\n            <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\r\n            \r\n            <table {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column) => (\r\n                                <th {...column.getHeaderProps()}>{column.render('Header')}\r\n                                <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr {...row.getRowProps()}>\r\n                                {row.cells.map((cell) => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n                <tfoot>\r\n                    {footerGroups.map((footerGroup) => (\r\n                        <tr {...footerGroup.getFooterGroupProps()}>\r\n                            {footerGroup.headers.map((column) => (\r\n                                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </tfoot>\r\n            </table>\r\n        </>\r\n    )\r\n}","C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\GlobalFilter.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\ColumnFilter.js",[],"C:\\Users\\Owner\\Desktop\\VS Projects\\React_Client-Side-Table\\src\\components\\PaginationTable.js",["55"],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":8,"nodeType":"62","messageId":"63","endLine":1,"endColumn":12},{"ruleId":"60","severity":1,"message":"64","line":3,"column":10,"nodeType":"62","messageId":"63","endLine":3,"endColumn":20},{"ruleId":"60","severity":1,"message":"65","line":4,"column":10,"nodeType":"62","messageId":"63","endLine":4,"endColumn":22},{"ruleId":"60","severity":1,"message":"66","line":5,"column":10,"nodeType":"62","messageId":"63","endLine":5,"endColumn":24},{"ruleId":"60","severity":1,"message":"67","line":4,"column":19,"nodeType":"62","messageId":"63","endLine":4,"endColumn":34},{"ruleId":"60","severity":1,"message":"67","line":4,"column":19,"nodeType":"62","messageId":"63","endLine":4,"endColumn":34},{"ruleId":"60","severity":1,"message":"67","line":4,"column":19,"nodeType":"62","messageId":"63","endLine":4,"endColumn":34},{"ruleId":"60","severity":1,"message":"67","line":4,"column":19,"nodeType":"62","messageId":"63","endLine":4,"endColumn":34},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'BasicTable' is defined but never used.","'SortingTable' is defined but never used.","'FilteringTable' is defined but never used.","'GROUPED_COLUMNS' is defined but never used.","no-global-assign","no-unsafe-negation"]